
20/02

Idag har vi inom gruppen bestämt att vi ska göra en CHIP-8 Emulator :)


21/02 12:00-13:15

Vi har tillsammans i gruppen suttit ner och strukturerat upp projektet. Vi har fördelat arbete inom gruppen, skapat github repo,
trello board samt skapat boilerplate kod. 

Vi har även skapat ett overleaf dokument för vår rapport där vi färdigställt en mall att utgå ifrån.


21/02 13:15

Vi har träffat vår supertrevliga coach Sanna och presenterat vårt projekt.

23/02 12:30-13:30

Har undersökt hur vi ska använda record syntax för CPU och hur vi kan ändra på specifika värden m.h.a record syntax.
Har lagt till modul deklarationer för alla filer vi har lagt till preliminärt och sett till att de inkluderats i projektets
cabal fil.

23/02 13:30-14:00

Har undersökt hur vi ska tolka opcodes och utföra de instruktioner som opcodes:en representerar. Har börjat med att
implementera funktionen "fetchOpcode" för att hämta en opcode från minnet.
Administrativt har jag strukturerat upp cabal infrastrukturen där saker har lagts till i .cabal filen för
att man smidigt ska kunna använda "cabal run" för att köra projektet.

23/02 16:30-18:00

Har börjat med att implementera funktionen "executeOpcode" som är den del av CPUn som kommer att utföra alla operationer.
Det är många olika instruktioner som ska implementeras och det gäller att hålla tungan rätt i mun. Blir det fel här
är det väldigt svårt att ta reda på senare. Nästa steg som återstår är att implementera färdigt "executeOpcode" samt
implementera test fall för alla eller många av instruktionerna.

24/02 12:00-13:45

Nu implementerat färdigt alla instruktioner förutom två för opcodesen. De två som återstår kräver att vi inom gruppen 
kommer överrens om en konsensus över hur vi ska behandla input gällande knapptryck.

24/02 15:30-16:45

Har implementerat den hittils största opcoden 0xDXYN som hanterar funktionaliteten kring att rita ut saker på skärmen.
Det var väldigt trixit att ersätta ett enskilt element i en två dimensionell lista men nu verkar det fungera. Måste ta
mig tiden att skapa testfall för den här bjässen sen också.

25/02 9:30-10:45

Delat upp funktionalitet i Emulate.hs i separata funktioner för att enklare kunna läsa koden
och eventuellt debugga.
Skapat filen Utility.hs för "hjälp" funktioner och dylikt.
Testfall implementerade för funktioner i Utility.hs.

25/02 12:30-16:45

Implementerat testfall för majoriteten av funktionerna i Emulate.hs i filen tests.hs
Fixat buggar i opcodes där det upptäckts p.g.a testfallen.
Det blir tydligt att testfall är användbara när man jobbar i projekt som detta. Jag har hittat
fel som hade tagit oss en bra stund att debugga annars.
Mycket refactoring av kod.
Implemeneterat generateRandomValue för opcode 0xCXNN.

26/02 10:00-14:00

Vi har suttit ner tillsammans i gruppen och kopplat ihop den grafiska delen med själva CPUn.
Det var ett par fel i CPUn, mer specifikt några opcodes, där felet berodde på att vi adderade
två värden som 32-bitars värden där vi i själva verket skulle ha adderat dom som 8-bitars värden.
Detta löstes enkelt genom att köra modulo 256 på det adderade eller subtraherade värderna.

checkIfInput implementerades för opcode 0xFX0A.

Har även ändrat i implementationen för drawSprite och xorVram då collision detection inte
gick av 100% av tiden.

26/02 17:30-18:30

Lagt till fulla specifikationer för funktioner i Emulate.hs där funktionerna ansågs vara av
signifikant komplexitet. Har även ändrat i många funktioner där parenteser kan tas bort och
där man kan ersätta med enklare implementationer.

27/02 10:00-12:00

Fixat ännu ett par buggar relaterade till operationer med 8-bitars värden som ger resultat som 
är större än (2^8 - 1).

Implementerat funktionerna shiftRegLeft & shiftRegRight och implementerat testfall för dem samt
testfall för checkIfInput.

Lagt till funktionalitet för "pseudo-true-randomness" där random seeden plockas från datorns
UNIX-timestamp.

27/02 17:30-19:00

Skrivit på dokumentationen. Fokuserat främst på "Use cases" och "Introduction" avsnitten.
